<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.migu.income.dao.MiguTwoNonReportMapper">
  <resultMap id="BaseResultMap" type="cn.migu.income.pojo.MiguProjectProfitReport" >
    <result column="PROJECT_ID" property="projectId" jdbcType="VARCHAR" />
    <result column="PROJECT_NAME" property="projectName" jdbcType="VARCHAR" />
    <result column="PROJECT_DEPT_ID" property="deptId" jdbcType="VARCHAR" />
    <result column="DEPT_NAME" property="deptName" jdbcType="VARCHAR" />
    <result column="PROJECT_USER_ID" property="personId" jdbcType="VARCHAR" />
    <result column="USER_NAME" property="personName" jdbcType="VARCHAR" />
    <result column="COSTAMOUNT" property="costAmount" jdbcType="VARCHAR" />
    <result column="REALINCOME" property="actualIncome" jdbcType="VARCHAR" />
  </resultMap>
  
   <resultMap id="BaseResultMap2" type="cn.migu.income.pojo.MiguSectorIncomeReport" >
    <result column="monthId" property="monthId" jdbcType="VARCHAR" />
    <result column="deptId" property="deptId" jdbcType="VARCHAR" />
    <result column="deptName" property="deptName" jdbcType="VARCHAR" />
    <result column="className" property="className" jdbcType="VARCHAR" />
    <result column="sectionName" property="sectionName" jdbcType="VARCHAR" />
    <result column="estimateTax" property="estimateTax" jdbcType="VARCHAR" />
    <result column="realTax" property="realTax" jdbcType="VARCHAR" />
    <result column="actualIncome" property="actualIncome" jdbcType="VARCHAR" />
    <result column="costAmountTotal" property="costAmountTotal" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="BaseResultMap3" type="cn.migu.income.pojo.MiguIncomeDetailReport" >
    <result column="INCOME_MANAGER_ID" property="incomeManagerId" jdbcType="VARCHAR" />
    <result column="CYCLE" property="cycle" jdbcType="VARCHAR" />
    <result column="PROJECT_ID" property="projectId" jdbcType="VARCHAR" />
    <result column="PROJECT_NAME" property="projectName" jdbcType="VARCHAR" />
    <result column="ESTIMATE_INCOME" property="estimateIncome" jdbcType="VARCHAR" />
    <result column="ESTIMATE_INCOME_TAX" property="estimateIncomeTax" jdbcType="VARCHAR" />
    <result column="ESTIMATE_EXCLUSIVE_TAX" property="estimateExclusiveTax" jdbcType="VARCHAR" />
    <result column="ESTIMATE_EXPLAIN" property="estimateExplain" jdbcType="VARCHAR" />
    <result column="REAL_INCOME" property="realIncome" jdbcType="VARCHAR" />
    <result column="REAL_INCOME_TAX" property="realIncomeTax" jdbcType="VARCHAR" />
    <result column="REAL_EXCLUSIVE_TAX" property="realExclusiveTax" jdbcType="VARCHAR" />
    <result column="REAL_EXPLAIN" property="realExplain" jdbcType="VARCHAR" />
    <result column="OFFSET" property="offset" jdbcType="VARCHAR" />
    <result column="ISNEED_BILL" property="isneedBill" jdbcType="VARCHAR" />
    <result column="MERGE_STATUS" property="isMerge" jdbcType="VARCHAR" />
    <result column="BILLING_KEY" property="billingKey" jdbcType="VARCHAR" />
    <result column="BILLING_TYPE" property="billingType" jdbcType="VARCHAR" />
    <result column="TOTAL" property="total" jdbcType="VARCHAR" />
	<result column="INVOICE_STATUS" property="invoiceStatus" jdbcType="VARCHAR" />
	<result column="INCOME" property="income" jdbcType="VARCHAR" />
	<result column="INCOME_DATE" property="incomeDate" jdbcType="VARCHAR" />
	<result column="INCOME_OPTION_URL" property="incomeOptionUrl" jdbcType="VARCHAR" />
	<result column="INCOME_STATUS" property="incomeStatus" jdbcType="VARCHAR" />
  </resultMap>
  
   <resultMap id="BaseResultMap4" type="cn.migu.income.pojo.MiguIncomeDetailReport2" >
    <result column="INCOME_MANAGER_ID" property="incomeManagerId" jdbcType="VARCHAR" />
    <result column="CYCLE" property="cycle" jdbcType="VARCHAR" />
    <result column="PROJECT_ID" property="projectId" jdbcType="VARCHAR" />
    <result column="CYCLE2" property="cycle2" jdbcType="VARCHAR" />
    <result column="PROJECT_ID2" property="projectId2" jdbcType="VARCHAR" />
    <result column="PROJECT_NAME" property="projectName" jdbcType="VARCHAR" />
    <result column="ESTIMATE_INCOME" property="estimateIncome" jdbcType="VARCHAR" />
    <result column="ESTIMATE_INCOME_TAX" property="estimateIncomeTax" jdbcType="VARCHAR" />
    <result column="ESTIMATE_EXCLUSIVE_TAX" property="estimateExclusiveTax" jdbcType="VARCHAR" />
    <result column="REAL_INCOME" property="realIncome" jdbcType="VARCHAR" />
    <result column="REAL_INCOME_TAX" property="realIncomeTax" jdbcType="VARCHAR" />
    <result column="REAL_EXCLUSIVE_TAX" property="realExclusiveTax" jdbcType="VARCHAR" />
    <result column="OFFSET" property="offset" jdbcType="VARCHAR" />
    <result column="ISNEED_BILL" property="isneedBill" jdbcType="VARCHAR" />
  </resultMap>
<!--   查询两非项目利润报表总数 -->
  <select id="queryProjectProfitTotal" resultType="java.lang.Integer" parameterType="java.util.Map" >
			select count(*) from (
			select i.*,g.dept_name,h.user_name from t_migu_departments g,t_migu_users h,
			(select f.project_id,f.project_name,f.project_user_id,f.project_dept_id,e.realIncome,e.costAmount from t_migu_project_base f left join
			(select c.*,d.costAmount from 
			(select a.project_id,a.project_name,sum(a.real_income) as realIncome  from t_migu_income_manager a group by a.project_id,a.project_name) c
			left join (select b.project_id,sum(b.BUDGET_AVAILABLE_AMOUNT) as costAmount from t_migu_project_budget b group by b.project_id) d  
			on c.project_id =d.project_id) e 
			on f.project_id =e.project_id) i
			where i.project_user_id = h.user_id and i.project_dept_id = g.dept_code) t where 1=1
	     	<if test="q_projectId != null">
	    		AND   (t.project_id like concat(concat('%',#{q_projectId}),'%') ESCAPE '\')  
	    	</if>
	    	<if test="q_projectName != null">
	    		AND   (t.project_name like concat(concat('%',#{q_projectName}),'%') ESCAPE '\')  
	    	</if>
     		<if test="dept != null">
	    		AND	 t.project_dept_id = #{dept}  
	    	</if>
	    	<if test="person != null">
	    		AND	 t.project_user_id = #{person}  
	    	</if>
  </select>
<!--   查询两非项目利润报表记录（分页） -->
  <select id="queryAllProjectProfit" resultMap="BaseResultMap" parameterType="java.util.Map">
	   select t11.* from(select t1.*,rownum rn from (
		   select t.* from (
				select i.*,g.dept_name,h.user_name from t_migu_departments g,t_migu_users h,
				(select f.project_id,f.project_name,f.project_user_id,f.project_dept_id,e.realIncome,e.costAmount from t_migu_project_base f left join
				(select c.*,d.costAmount from 
				(select a.project_id,a.project_name,sum(a.real_income) as realIncome  from t_migu_income_manager a group by a.project_id,a.project_name) c
				left join (select b.project_id,sum(b.BUDGET_AVAILABLE_AMOUNT) as costAmount from t_migu_project_budget b group by b.project_id) d  
				on c.project_id =d.project_id) e 
				on f.project_id =e.project_id) i
				where i.project_user_id = h.user_id and i.project_dept_id = g.dept_code) t where 1=1
		     	<if test="q_projectId != null">
		    		AND   (t.project_id like concat(concat('%',#{q_projectId}),'%') ESCAPE '\')  
		    	</if>
		    	<if test="q_projectName != null">
		    		AND   (t.project_name like concat(concat('%',#{q_projectName}),'%') ESCAPE '\')  
		    	</if>
	     		<if test="dept != null">
		    		AND	 t.project_dept_id = #{dept}  
		    	</if>
		    	<if test="person != null">
		    		AND	 t.project_user_id = #{person}  
		    	</if>
		    	order by to_number(t.project_id) asc
	   ) t1) t11 where rn between (#{curPage}-1) * #{pageSize} + 1 and (#{curPage}) * #{pageSize} 
  </select>
 <!--   查询两非项目利润报表记录（不分页） -->
  <select id="queryAllProjectProfit2" resultMap="BaseResultMap" parameterType="java.util.Map">
		   select t.* from (
				select i.*,g.dept_name,h.user_name from t_migu_departments g,t_migu_users h,
				(select f.project_id,f.project_name,f.project_user_id,f.project_dept_id,e.realIncome,e.costAmount from t_migu_project_base f left join
				(select c.*,d.costAmount from 
				(select a.project_id,a.project_name,sum(a.real_income) as realIncome  from t_migu_income_manager a group by a.project_id,a.project_name) c
				left join (select b.project_id,sum(b.BUDGET_AVAILABLE_AMOUNT) as costAmount from t_migu_project_budget b group by b.project_id) d  
				on c.project_id =d.project_id) e 
				on f.project_id =e.project_id) i
				where i.project_user_id = h.user_id and i.project_dept_id = g.dept_code) t where 1=1
		     	<if test="q_projectId != null">
		    		AND   (t.project_id like concat(concat('%',#{q_projectId}),'%') ESCAPE '\')  
		    	</if>
		    	<if test="q_projectName != null">
		    		AND   (t.project_name like concat(concat('%',#{q_projectName}),'%') ESCAPE '\')  
		    	</if>
	     		<if test="dept != null">
		    		AND	 t.project_dept_id = #{dept}  
		    	</if>
		    	<if test="person != null">
		    		AND	 t.project_user_id = #{person}  
		    	</if>
		    	order by to_number(t.project_id) asc
  </select>
  
  <!--   查询两非项目分部门收益报表总数 -->
  <select id="querySectorIncomeReportTotal" resultType="java.lang.Integer" parameterType="java.util.Map" >
			select count(*) from (
		      select t8.cycle as monthId,t8.project_dept_id as deptId,t8.dept_name as deptName,t8.class_name as className,t8.section_name as sectionName,
		      sum(t8.estimate_exclusive_tax) as estimateTax,sum(t8.real_exclusive_tax) as realtax,sum(t8.actual_income) as actualIncome from
		      (select * from (
		      select t3.cycle,t3.project_id,t3.project_name,t4.estimate_exclusive_tax,t5.real_exclusive_tax,t6.actual_income from t_migu_income_manager t3 
		      left join (select cycle,project_id,project_name,estimate_exclusive_tax from t_migu_income_manager where eastimate_status ='2')t4
		      on t3.cycle =t4.cycle and t3.project_id =t4.project_id 
		      left join (select cycle,project_id,project_name,real_exclusive_tax from t_migu_income_manager where real_status ='2')t5
		      on t3.cycle =t5.cycle and t3.project_id =t5.project_id  
		      left join (select t2.cycle,t2.project_id,t2.project_name,sum(t2.income) as actual_income from t_migu_income_actual t2 
              where t2.income_status ='2' and t2.isneed_bill ='1' and (t2.type &lt;&gt; '1' or t2.type is null) group by t2.cycle,t2.project_id,t2.project_name) t6 
		      on t3.cycle =t6.cycle and t3.project_id =t6.project_id 
		      where (t3.isneed_bill='1' or  t3.isneed_bill is null) and (t3.merge_status &lt;&gt; '2' or t3.merge_status is null)
		      union all
		      select t3.cycle,t3.project_id,t3.project_name,t4.estimate_exclusive_tax,t5.real_exclusive_tax,t6.actual_income from t_migu_income_manager t3 
		      left join (select cycle,project_id,project_name,estimate_exclusive_tax from t_migu_income_manager where eastimate_status ='2')t4
		      on t3.cycle =t4.cycle and t3.project_id =t4.project_id 
		      left join (select cycle,project_id,project_name,real_exclusive_tax from t_migu_income_manager where real_status ='2')t5
		      on t3.cycle =t5.cycle and t3.project_id =t5.project_id  
		      left join (select cycle,project_id,project_name,sum(income) as actual_income from t_migu_income_actual where income_status ='2' and isneed_bill = 0 and (type &lt;&gt; '1' or type is null)
		      group by cycle,project_id,project_name) t6 
		      on t3.cycle =t6.cycle and t3.project_id =t6.project_id 
		      where t3.isneed_bill='0' and (t3.merge_status &lt;&gt; '2' or t3.merge_status is null))t
		      left join (      
		      select a.project_id,a.project_dept_id,a.income_class_id,a.income_section_id,b.income_name as class_name,c.income_name as section_name,d.dept_name from t_migu_project_base a 
		      left join t_migu_income_categories b on a.income_class_id = b.income_id and b.state ='1'
		      left join t_migu_income_categories c on a.income_section_id = c.income_id and c.state ='1'
		      left join t_migu_departments d on a.project_dept_id = d.dept_code) tt
		      on t.project_id = tt.project_id 
		      ) t8 
	      	where 1=1 
	        <if test="dept != null">
	          AND  t8.project_dept_id = #{dept}  
	        </if>
			group by t8.cycle,t8.project_dept_id,t8.dept_name,t8.class_name,t8.section_name order by t8.cycle,t8.project_dept_id  
			)
  </select>
  
  <!--   查询两非项目分部门收益报表记录（分页） -->
  <select id="querySectorIncomeReport" resultMap="BaseResultMap2" parameterType="java.util.Map">
	   select t11.* from(select t1.*,rownum rn from (
		      select t8.cycle as monthId,t8.project_dept_id as deptId,t8.dept_name as deptName,t8.class_name as className,t8.section_name as sectionName,
		      sum(t8.estimate_exclusive_tax) as estimateTax,sum(t8.real_exclusive_tax) as realtax,sum(t8.actual_income) as actualIncome from
		      (select * from (
		      select t3.cycle,t3.project_id,t3.project_name,t4.estimate_exclusive_tax,t5.real_exclusive_tax,t6.actual_income from t_migu_income_manager t3 
		      left join (select cycle,project_id,project_name,estimate_exclusive_tax from t_migu_income_manager where eastimate_status ='2')t4
		      on t3.cycle =t4.cycle and t3.project_id =t4.project_id 
		      left join (select cycle,project_id,project_name,real_exclusive_tax from t_migu_income_manager where real_status ='2')t5
		      on t3.cycle =t5.cycle and t3.project_id =t5.project_id  
		      left join (select t2.cycle,t2.project_id,t2.project_name,sum(t2.income) as actual_income from t_migu_income_actual t2 
          	  where t2.income_status ='2' and t2.isneed_bill ='1' and (t2.type &lt;&gt; '1' or t2.type is null) group by t2.cycle,t2.project_id,t2.project_name) t6 
		      on t3.cycle =t6.cycle and t3.project_id =t6.project_id 
		      where (t3.isneed_bill='1' or  t3.isneed_bill is null) and (t3.merge_status &lt;&gt; '2' or t3.merge_status is null)
		      union all
		      select t3.cycle,t3.project_id,t3.project_name,t4.estimate_exclusive_tax,t5.real_exclusive_tax,t6.actual_income from t_migu_income_manager t3 
		      left join (select cycle,project_id,project_name,estimate_exclusive_tax from t_migu_income_manager where eastimate_status ='2')t4
		      on t3.cycle =t4.cycle and t3.project_id =t4.project_id 
		      left join (select cycle,project_id,project_name,real_exclusive_tax from t_migu_income_manager where real_status ='2')t5
		      on t3.cycle =t5.cycle and t3.project_id =t5.project_id  
		      left join (select cycle,project_id,project_name,sum(income) as actual_income from t_migu_income_actual where income_status ='2' and isneed_bill = 0 and (type &lt;&gt; '1' or type is null)
		      group by cycle,project_id,project_name) t6 
		      on t3.cycle =t6.cycle and t3.project_id =t6.project_id 
		      where t3.isneed_bill='0' and (t3.merge_status &lt;&gt; '2' or t3.merge_status is null))t
		      left join (      
		      select a.project_id,a.project_dept_id,a.income_class_id,a.income_section_id,b.income_name as class_name,c.income_name as section_name,d.dept_name from t_migu_project_base a 
		      left join t_migu_income_categories b on a.income_class_id = b.income_id and b.state ='1'
		      left join t_migu_income_categories c on a.income_section_id = c.income_id and c.state ='1'
		      left join t_migu_departments d on a.project_dept_id = d.dept_code) tt
		      on t.project_id = tt.project_id 
		      ) t8 
	      	where 1=1 
	        <if test="dept != null">
	          AND  t8.project_dept_id = #{dept}  
	        </if>
			group by t8.cycle,t8.project_dept_id,t8.dept_name,t8.class_name,t8.section_name order by t8.cycle,t8.project_dept_id  
	   ) t1) t11 where rn between (#{curPage}-1) * #{pageSize} + 1 and (#{curPage}) * #{pageSize} 
  </select>
  
    <!--   查询两非项目分部门收益报表记录（不分页） -->
  <select id="querySectorIncomeReport2" resultMap="BaseResultMap2" parameterType="java.util.Map">
		      select t8.cycle as monthId,t8.project_dept_id as deptId,t8.dept_name as deptName,t8.class_name as className,t8.section_name as sectionName,
		      sum(t8.estimate_exclusive_tax) as estimateTax,sum(t8.real_exclusive_tax) as realtax,sum(t8.actual_income) as actualIncome from
		      (select * from (
		      select t3.cycle,t3.project_id,t3.project_name,t4.estimate_exclusive_tax,t5.real_exclusive_tax,t6.actual_income from t_migu_income_manager t3 
		      left join (select cycle,project_id,project_name,estimate_exclusive_tax from t_migu_income_manager where eastimate_status ='2')t4
		      on t3.cycle =t4.cycle and t3.project_id =t4.project_id 
		      left join (select cycle,project_id,project_name,real_exclusive_tax from t_migu_income_manager where real_status ='2')t5
		      on t3.cycle =t5.cycle and t3.project_id =t5.project_id  
		      left join (select t2.cycle,t2.project_id,t2.project_name,sum(t2.income) as actual_income from t_migu_income_actual t2 
              where t2.income_status ='2' and t2.isneed_bill ='1' and (t2.type &lt;&gt; '1' or t2.type is null) group by t2.cycle,t2.project_id,t2.project_name) t6 
		      on t3.cycle =t6.cycle and t3.project_id =t6.project_id 
		      where (t3.isneed_bill='1' or  t3.isneed_bill is null) and (t3.merge_status &lt;&gt; '2' or t3.merge_status is null)
		      union all
		      select t3.cycle,t3.project_id,t3.project_name,t4.estimate_exclusive_tax,t5.real_exclusive_tax,t6.actual_income from t_migu_income_manager t3 
		      left join (select cycle,project_id,project_name,estimate_exclusive_tax from t_migu_income_manager where eastimate_status ='2')t4
		      on t3.cycle =t4.cycle and t3.project_id =t4.project_id 
		      left join (select cycle,project_id,project_name,real_exclusive_tax from t_migu_income_manager where real_status ='2')t5
		      on t3.cycle =t5.cycle and t3.project_id =t5.project_id  
		      left join (select cycle,project_id,project_name,sum(income) as actual_income from t_migu_income_actual where income_status ='2' and isneed_bill = 0 and (type &lt;&gt; '1' or type is null)
		      group by cycle,project_id,project_name) t6 
		      on t3.cycle =t6.cycle and t3.project_id =t6.project_id 
		      where t3.isneed_bill='0' and (t3.merge_status &lt;&gt; '2' or t3.merge_status is null))t
		      left join (      
		      select a.project_id,a.project_dept_id,a.income_class_id,a.income_section_id,b.income_name as class_name,c.income_name as section_name,d.dept_name from t_migu_project_base a 
		      left join t_migu_income_categories b on a.income_class_id = b.income_id and b.state ='1'
		      left join t_migu_income_categories c on a.income_section_id = c.income_id and c.state ='1'
		      left join t_migu_departments d on a.project_dept_id = d.dept_code) tt
		      on t.project_id = tt.project_id 
		      ) t8 
	      	where 1=1 
	        <if test="dept != null">
	         AND  t8.project_dept_id = #{dept}  
	        </if>
			group by t8.cycle,t8.project_dept_id,t8.dept_name,t8.class_name,t8.section_name order by t8.cycle,t8.project_dept_id 
	</select>
	
  <!--   查询两非收入明细报表记录（总数） -->
  <select id="queryIncomeDetailReportTotal" resultType="java.lang.Integer" parameterType="java.util.Map">
	 	  select count(*) from (
		      select t.income_manager_id,t.cycle,t.project_id,t.project_name,
		      nvl(to_char(t.estimate_income,'fm999999999990.00'),'-') as estimate_income,nvl(to_char(t.estimate_income_tax,'fm999999999990.00'),'-') as estimate_income_tax,
		      nvl(to_char(t.estimate_exclusive_tax,'fm999999999990.00'),'-') as estimate_exclusive_tax,nvl(t.estimate_explain,'-') as estimate_explain,
		      to_char(t.real_income,'fm999999999990.00') as real_income,to_char(t.real_income_tax,'fm999999999990.00') as real_income_tax,
		      to_char(t.real_exclusive_tax,'fm999999999990.00') as real_exclusive_tax,t.real_explain,decode(t.offset,'0','否','1','是','') as offset,decode(t.isneed_bill,'0','否','1','是','') as isneed_bill,
		      t1.billing_key,decode(t1.billing_type,'0','专票','1','普票','') as billing_type,to_char(t1.total) as total,decode(t1.invoice_status,'00','开具成功','99','未开具','') as invoice_status,
		      t3.income,t3.income_date,t3.income_option_url,decode(t3.income_status,'1','提交审核中','2','审核通过','3','驳回','') as income_status
		      from t_migu_income_manager t 
		      left join (select a.*,b.total from t_migu_income_billing a left join (select billing_key ,sum(total) as total from t_migu_income_bill group by billing_key) b on a.billing_key =b.billing_key) t1 on t.cycle =t1.cycle and t.project_id =t1.project_id 
		      left join t_migu_income_actual t3 on t1.billing_key = t3.billing_key  and (t3.type &lt;&gt; '2' or t3.type is null)
		      where (t.isneed_bill = '1' or t.isneed_bill is null) and (t.merge_status &lt;&gt; '1' or t.merge_status is null)
		      union all
		      select t4.income_manager_id,t4.cycle,t4.project_id,t4.project_name,
		      nvl(to_char(t4.estimate_income,'fm999999999990.00'),'-'),nvl(to_char(t4.estimate_income_tax,'fm999999999990.00'),'-'),nvl(to_char(t4.estimate_exclusive_tax,'fm999999999990.00'),'-'),nvl(t4.estimate_explain,'-'),
		      to_char(t4.real_income,'fm999999999990.00'),to_char(t4.real_income_tax,'fm999999999990.00'),to_char(t4.real_exclusive_tax,'fm999999999990.00'),t4.real_explain,decode(t4.offset,'0','否','1','是',''),decode(t4.isneed_bill,'0','否','1','是',''),
		      '-','-','-','-',
		      t5.income,t5.income_date,t5.income_option_url,decode(t5.income_status,'1','提交审核中','2','审核通过','3','驳回','')
		      from t_migu_income_manager t4
		      left join t_migu_income_actual t5 on t4.cycle = t5.cycle and t4.project_id =t5.project_id and (t5.type &lt;&gt; '2' or t5.type is null)
		      where t4.isneed_bill = '0' and t4.merge_status &lt;&gt; '1'
		      ) tt where 1 = 1 
			<if test="q_projectId != null">
	    		AND   (tt.project_id like concat(concat('%',#{q_projectId}),'%') ESCAPE '\')  
	    	</if>
	    	<if test="q_projectName != null">
	    		AND   (tt.project_name like concat(concat('%',#{q_projectName}),'%') ESCAPE '\')  
	    	</if>
			<if test="q_month_begin != null"> 
        		AND   tt.CYCLE &gt;= #{q_month_begin}  
     		</if>
     		<if test="q_month_end != null"> 
        		AND   tt.CYCLE &lt;= #{q_month_end}  
     		</if>
  </select>
  
  <!--   查询两非收入明细报表记录（分页） -->
  <select id="queryIncomeDetailReport" resultMap="BaseResultMap3" parameterType="java.util.Map">
	   select t11.* from(select t0.*,rownum rn from (
	   		select tt.* from (
		      select t.income_manager_id,t.cycle,t.project_id,t.project_name,
		      nvl(to_char(t.estimate_income,'fm999999999990.00'),'-') as estimate_income,nvl(to_char(t.estimate_income_tax,'fm999999999990.00'),'-') as estimate_income_tax,
		      nvl(to_char(t.estimate_exclusive_tax,'fm999999999990.00'),'-') as estimate_exclusive_tax,nvl(t.estimate_explain,'-') as estimate_explain,
		      to_char(t.real_income,'fm999999999990.00') as real_income,to_char(t.real_income_tax,'fm999999999990.00') as real_income_tax,
		      to_char(t.real_exclusive_tax,'fm999999999990.00') as real_exclusive_tax,t.real_explain,decode(t.offset,'0','否','1','是','') as offset,decode(t.isneed_bill,'0','否','1','是','') as isneed_bill,decode(t.merge_status,'2','是','否') as merge_status,
		      t1.billing_key,decode(t1.billing_type,'0','专票','1','普票','') as billing_type,to_char(t1.total) as total,decode(t1.invoice_status,'00','开具成功','99','未开具','') as invoice_status,
		      t3.income,t3.income_date,t3.income_option_url,decode(t3.income_status,'1','提交审核中','2','审核通过','3','驳回','') as income_status
		      from t_migu_income_manager t 
		      left join (select a.*,b.total from t_migu_income_billing a left join (select billing_key ,sum(total) as total from t_migu_income_bill group by billing_key) b on a.billing_key =b.billing_key) t1 on t.cycle =t1.cycle and t.project_id =t1.project_id 
		      left join t_migu_income_actual t3 on t1.billing_key = t3.billing_key  and (t3.type &lt;&gt; '2' or t3.type is null)
		      where (t.isneed_bill = '1' or t.isneed_bill is null) and (t.merge_status &lt;&gt; '1' or t.merge_status is null)
		      union all
		      select t4.income_manager_id,t4.cycle,t4.project_id,t4.project_name,
		      nvl(to_char(t4.estimate_income,'fm999999999990.00'),'-'),nvl(to_char(t4.estimate_income_tax,'fm999999999990.00'),'-'),nvl(to_char(t4.estimate_exclusive_tax,'fm999999999990.00'),'-'),nvl(t4.estimate_explain,'-'),
		      to_char(t4.real_income,'fm999999999990.00'),to_char(t4.real_income_tax,'fm999999999990.00'),to_char(t4.real_exclusive_tax,'fm999999999990.00'),t4.real_explain,decode(t4.offset,'0','否','1','是',''),decode(t4.isneed_bill,'0','否','1','是',''),decode(t4.merge_status,'2','是','否'),
		      '-','-','-','-',
		      t5.income,t5.income_date,t5.income_option_url,decode(t5.income_status,'1','提交审核中','2','审核通过','3','驳回','')
		      from t_migu_income_manager t4
		      left join t_migu_income_actual t5 on t4.cycle = t5.cycle and t4.project_id =t5.project_id and (t5.type &lt;&gt; '2' or t5.type is null)
		      where t4.isneed_bill = '0' and t4.merge_status &lt;&gt; '1'
		      ) tt where 1 = 1 
			<if test="q_projectId != null">
	    		AND   (tt.project_id like concat(concat('%',#{q_projectId}),'%') ESCAPE '\')  
	    	</if>
	    	<if test="q_projectName != null">
	    		AND   (tt.project_name like concat(concat('%',#{q_projectName}),'%') ESCAPE '\')  
	    	</if>
			<if test="q_month_begin != null"> 
        		AND   tt.CYCLE &gt;= #{q_month_begin}  
     		</if>
     		<if test="q_month_end != null"> 
        		AND   tt.CYCLE &lt;= #{q_month_end}  
     		</if>
	    	order by income_manager_id) t0) t11 where rn between (#{curPage}-1) * #{pageSize} + 1 and (#{curPage}) * #{pageSize} 
  </select>
  
  <!--   查询两非收入明细报表记录（不分页） -->
  <select id="queryIncomeDetailReport2" resultMap="BaseResultMap3" parameterType="java.util.Map">
	   		select tt.* from (
		      select t.income_manager_id,t.cycle,t.project_id,t.project_name,
		      nvl(to_char(t.estimate_income,'fm999999999990.00'),'-') as estimate_income,nvl(to_char(t.estimate_income_tax,'fm999999999990.00'),'-') as estimate_income_tax,
		      nvl(to_char(t.estimate_exclusive_tax,'fm999999999990.00'),'-') as estimate_exclusive_tax,nvl(t.estimate_explain,'-') as estimate_explain,
		      to_char(t.real_income,'fm999999999990.00') as real_income,to_char(t.real_income_tax,'fm999999999990.00') as real_income_tax,
		      to_char(t.real_exclusive_tax,'fm999999999990.00') as real_exclusive_tax,t.real_explain,decode(t.offset,'0','否','1','是','') as offset,decode(t.isneed_bill,'0','否','1','是','') as isneed_bill,decode(t.merge_status,'2','是','否') as merge_status,
		      t1.billing_key,decode(t1.billing_type,'0','专票','1','普票','') as billing_type,to_char(t1.total) as total,decode(t1.invoice_status,'00','开具成功','99','未开具','') as invoice_status,
		      t3.income,t3.income_date,t3.income_option_url,decode(t3.income_status,'1','提交审核中','2','审核通过','3','驳回','') as income_status
		      from t_migu_income_manager t 
		      left join (select a.*,b.total from t_migu_income_billing a left join (select billing_key ,sum(total) as total from t_migu_income_bill group by billing_key) b on a.billing_key =b.billing_key) t1 on t.cycle =t1.cycle and t.project_id =t1.project_id 
		      left join t_migu_income_actual t3 on t1.billing_key = t3.billing_key  and (t3.type &lt;&gt; '2' or t3.type is null)
		      where (t.isneed_bill = '1' or t.isneed_bill is null) and (t.merge_status &lt;&gt; '1' or t.merge_status is null)
		      union all
		      select t4.income_manager_id,t4.cycle,t4.project_id,t4.project_name,
		      nvl(to_char(t4.estimate_income,'fm999999999990.00'),'-'),nvl(to_char(t4.estimate_income_tax,'fm999999999990.00'),'-'),nvl(to_char(t4.estimate_exclusive_tax,'fm999999999990.00'),'-'),nvl(t4.estimate_explain,'-'),
		      to_char(t4.real_income,'fm999999999990.00'),to_char(t4.real_income_tax,'fm999999999990.00'),to_char(t4.real_exclusive_tax,'fm999999999990.00'),t4.real_explain,decode(t4.offset,'0','否','1','是',''),decode(t4.isneed_bill,'0','否','1','是',''),decode(t4.merge_status,'2','是','否'),
		      '-','-','-','-',
		      t5.income,t5.income_date,t5.income_option_url,decode(t5.income_status,'1','提交审核中','2','审核通过','3','驳回','')
		      from t_migu_income_manager t4
		      left join t_migu_income_actual t5 on t4.cycle = t5.cycle and t4.project_id =t5.project_id and (t5.type &lt;&gt; '2' or t5.type is null)
		      where t4.isneed_bill = '0' and t4.merge_status &lt;&gt; '1'
		      ) tt where 1 = 1 
			<if test="q_projectId != null">
	    		AND   (tt.project_id like concat(concat('%',#{q_projectId}),'%') ESCAPE '\')  
	    	</if>
	    	<if test="q_projectName != null">
	    		AND   (tt.project_name like concat(concat('%',#{q_projectName}),'%') ESCAPE '\')  
	    	</if>
			<if test="q_month_begin != null"> 
        		AND   tt.CYCLE &gt;= #{q_month_begin}  
     		</if>
     		<if test="q_month_end != null"> 
        		AND   tt.CYCLE &lt;= #{q_month_end}  
     		</if>
	    	order by income_manager_id
  </select>
  
  <!--   查询两非收入明细合并前详情报表 -->
  <select id="queryIncomeDetailReport3" resultMap="BaseResultMap4" >
		select t.income_manager_id,a.cycle as cycle2,a.project_id as project_id2,t.cycle,t.project_id,t.project_name,
		nvl(to_char(t.estimate_income,'fm999999999990.00'),'-') as estimate_income,nvl(to_char(t.estimate_income_tax,'fm999999999990.00'),'-') as estimate_income_tax,
		nvl(to_char(t.estimate_exclusive_tax,'fm999999999990.00'),'-') as estimate_exclusive_tax,
		to_char(t.real_income,'fm999999999990.00') as real_income,to_char(t.real_income_tax,'fm999999999990.00') as real_income_tax,
		to_char(t.real_exclusive_tax,'fm999999999990.00') as real_exclusive_tax,decode(t.offset,'0','否','1','是','') as offset,decode(t.isneed_bill,'0','否','1','是','') as isneed_bill
		from t_migu_income_manager t
		left join(
		select income_manager_id,cycle,project_id,project_name from t_migu_income_manager) a
		on t.merge_id = a.income_manager_id
		where t.merge_status ='1'
		<if test="q_projectId != null">
   			AND   (a.project_id like concat(concat('%',#{q_projectId}),'%') ESCAPE '\')  
   		</if>
   		<if test="q_projectName != null">
	    	AND   (a.project_name like concat(concat('%',#{q_projectName}),'%') ESCAPE '\')  
	    </if>
		<if test="q_month_begin != null"> 
      		AND   a.CYCLE &gt;= #{q_month_begin}  
   		</if>
   		<if test="q_month_end != null"> 
      		AND   a.CYCLE &lt;= #{q_month_end}  
   		</if>
		order by a.project_id,a.cycle
  </select>
</mapper>